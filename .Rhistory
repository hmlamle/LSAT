geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Rugosity")+
ggtitle("100cm Box")
model <- lm(`turf_ length_mm` ~ avg_rugo100, data = rawdata100)
summary(model)
# regular rugosity vs sediment depth
rugo100_sediment <- ggplot(rawdata100, aes(x = avg_rugo100,  y = sed_depth_mm))+     # modelling sediment depth (y) as function
geom_point()+                                                                 # of rugosity (x)
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Rugosity")
model <- lm(sed_depth_mm ~ avg_rugo100, data = rawdata100)
summary(model)
# slope vs turf length
slope100_turf <- ggplot(rawdata100, aes(slope, y = `turf_ length_mm`))+           # modelling turf length (y) as function
geom_point()+                                                                 # of slope
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Average Slope (degrees)")+
ggtitle("100cm Box")
model <- lm(`turf_ length_mm` ~ MEAN, data = rawdata100)
summary(model)
# slope vs sediment depth
slope100_sediment <- ggplot(rawdata100, aes(slope, y = sed_depth_mm))+        # modelling sediment depth (y) as function
geom_point()+                                                                 # of slope (x)
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Average Slope (degrees)")
model <- lm(sed_depth_mm ~ MEAN, data = rawdata100)
summary(model)
p1 <- ggplot(rawdata25, aes(x = avg_rugo25, y = `Turf length (mm)`))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Rugosity")+
ggtitle("25cm microquadrat")+
theme_classic() <- ggplot(rawdata25, aes(x = avg_rugo25, y = `Turf length (mm)`))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Rugosity")+
ggtitle("25cm microquadrat")+
theme_classic()
p2 <- ggplot(rawdata25, aes(x = avg_rugo25,  y = `Sediment depth (mm)`))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Rugosity")+
ggtitle("25cm microquadrat")+
theme_classic()
p3 <- ggplot(rawdata50, aes(x = avg_rugo50, y = `Turf length (mm)`))+   # Modelling turf length (y) as function of rugosity (x)
geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Rugosity")+
ggtitle("50cm microquadrat")+
theme_classic()
p4 <- ggplot(rawdata50, aes(x = avg_rugo50,  y = `Sediment depth (mm)`))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Rugosity")+
ggtitle("50cm microquadrat")+
theme_classic()
p5 <- ggplot(rawdata100, aes(x = avg_rugo100, y = `Turf length (mm)`))+   # Modelling turf length (y) as function of rugosity (x)
geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Rugosity")+
ggtitle("100cm quadrat")+
theme_classic()
p6 <- ggplot(rawdata100, aes(x = avg_rugo100,  y = `Sediment depth (mm)`))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Rugosity")+
ggtitle("100cm Quadrat")+
theme_classic()
(p1 | p2) / (p3 | p4) / (p5 | p6)
(rugo25_turf | rugo25_sediment) / (rugo50_turf | rugo50_sediment) / (rugo100_turf | rugo100_sediment) +
plot_annotation(
title = "Rugosity Results",
)
p1 <- ggplot(rawdata25, aes(MEAN, y = `Turf length (mm)`))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Average Slope (degrees)")+
ggtitle("25cm microquadrat")+
theme_classic()
p2 <- ggplot(rawdata25, aes(MEAN, y = `Sediment depth (mm)`))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Average Slope (degrees)")+
ggtitle("25cm Quadrat")+
theme_classic()
p3 <- ggplot(rawdata50, aes(MEAN, y = `Turf length (mm)`))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Average Slope (degrees)")+
ggtitle("50cm microquadrat")+
theme_classic()
p4 <- ggplot(rawdata50, aes(MEAN, y = `Sediment depth (mm)`))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Average Slope (degrees)")+
ggtitle("50cm Quadrat")+
theme_classic()
(rugo25_turf | rugo25_sediment) / (rugo50_turf | rugo50_sediment) / (rugo100_turf | rugo100_sediment) +
plot_annotation(
title = "Rugosity Results",
)
(slope25_turf | slope25_sediment) / (slope50_turf | slope50_sediment) / (slope100_turf | slope100_sediment) +
plot_annotation(
title = "Rugosity Results",
)
(slope25_turf | slope25_sediment) / (slope50_turf | slope50_sediment) / (slope100_turf | slope100_sediment) +
plot_annotation(
title = "Slope Results",
)
write.csv(rawdata25, file = "25cm Box data")
write.csv(rawdata25, file = "25cm Box data.csv")
library(tidyverse)
# Define the number of files for each category (12 if did half, 25 if did full transect)
n_files <- 25
# Initialize empty lists to store each csv in a list:
data_25cm <- list()
data_50cm <- list()
data_100cm <- list()
# Define the number of files for each category (12 if did half, 25 if did full transect)
n_files <- 25
# Initialize empty lists to store each csv in a list:
data_25cm <- list()
data_50cm <- list()
data_100cm <- list()
# fetching the csvs for 25cm microquadrat:
for (i in 1:n_files) {
file_name <- paste0("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/2. Viscore rugosity metrics/Fortlauderdale/FTL_20250721/25cm box/", "p", i, ".csv")
data_25cm[[i]] <- read.csv(file_name)
}
# rename the columns
for (i in 1:n_files) {
colnames(data_25cm[[i]]) <- c(paste0("nail", i), "transect", "sample", "x", "y", "z")
}
View(data_25cm)
# Define the number of files for each category (12 if did half, 25 if did full transect)
n_files <- 25
# Initialize empty lists to store each csv in a list:
data_25cm <- list()
data_50cm <- list()
data_100cm <- list()
n_files <- 25
data_25cm <- vector("list", n_files)   # pre-allocate list of length 25
names(data_25cm) <- paste0("p", 1:n_files)  # keep names fixed
for (i in 1:n_files) {
file_name <- paste0("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/2. Viscore rugosity metrics/Fortlauderdale/FTL_20250721/25cm box/",
"p", i, ".csv")
if (file.exists(file_name)) {
data_25cm[[i]] <- read.csv(file_name)
} else {
message("Skipping missing file: ", file_name)
data_25cm[[i]] <- NULL   # keep slot empty
}
}
View(data_25cm)
for (i in 1:n_files) {
file_name <- paste0("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/2. Viscore rugosity metrics/Fortlauderdale/FTL_20250721/25cm box/",
"p", i, ".csv")
if (file.exists(file_name)) {
data_25cm[[i]] <- read.csv(file_name)
} else {
message("Skipping missing file: ", file_name)
data_25cm[[i]] <- NULL   # keep slot empty
}
}
View(data_25cm)
names(data_25cm)
which(sapply(data_25cm, is.null))
# e.g. returns 5, 6, 22 if those files were missing
which(sapply(data_25cm, is.null))
# Define the number of files for each category (12 if did half, 25 if did full transect)
n_files <- 25
# Initialize empty lists to store each csv in a list:
data_25cm <- list()
data_50cm <- list()
data_100cm <- list()
# fetching the csvs for 25cm microquadrat:
for (i in 1:n_files) {
file_name <- paste0("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/2. Viscore rugosity metrics/Fortlauderdale/FTL_20250721/25cm box/", "p", i, ".csv")
data_25cm[[i]] <- read.csv(file_name)
}
# fetching the csvs for 25cm microquadrat:
for (i in 1:n_files) {
file_name <- paste0("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/2. Viscore rugosity metrics/Fortlauderdale/FTL_20250721/25cm box/", "p", i, ".csv")
data_25cm[[i]] <- read.csv(file_name)
}
# Define the number of files for each category (12 if did half, 25 if did full transect)
n_files <- 25
# Initialize empty lists to store each csv in a list:
data_25cm <- list()
data_50cm <- list()
data_100cm <- list()
# fetching the csvs for 25cm microquadrat:
for (i in 1:n_files) {
file_name <- paste0("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/2. Viscore rugosity metrics/Fortlauderdale/FTL_20250721/25cm box/", "p", i, ".csv")
data_25cm[[i]] <- read.csv(file_name)
}
View(data_25cm)
# Define the number of files for each category (12 if did half, 25 if did full transect)
n_files <- 25
# Initialize empty lists to store each csv in a list:
data_25cm <- list()
data_50cm <- list()
data_100cm <- list()
# fetching the csvs for 25cm microquadrat:
for (i in 1:n_files) {
file_name <- paste0("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/2. Viscore rugosity metrics/Fortlauderdale/FTL_20250721/25cm box/", "p", i, ".csv")
data_25cm[[i]] <- read.csv(file_name)
}
# rename the columns
for (i in 1:n_files) {
colnames(data_25cm[[i]]) <- c(paste0("nail", i), "transect", "sample", "x", "y", "z")
}
# 50cm microquadrat:
for (i in 1:n_files) {
file_name <- paste0("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/2. Viscore rugosity metrics/Emerald/ER_20250622/50cm box/", "p", i, ".csv")
data_50cm[[i]] <- read.csv(file_name)
}
# 50cm microquadrat:
for (i in 1:n_files) {
file_name <- paste0("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/2. Viscore rugosity metrics/Emerald/ER_20250622/50cm box/", "p", i, ".csv")
data_50cm[[i]] <- read.csv(file_name)
}
# 50cm microquadrat:
for (i in 1:n_files) {
file_name <- paste0("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/2. Viscore rugosity metrics/Emerald/ER_20250622/50cm box/", "p", i, ".csv")
data_50cm[[i]] <- read.csv(file_name)
}
file.exists("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/2. Viscore rugosity metrics/Emerald/ER_20250622/50cm box/p13.csv")
list.files("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/2. Viscore rugosity metrics/Emerald/ER_20250622/50cm box")
# 100cm microquadrat:
for (i in 1:n_files) {
file_name <- paste0("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/2. Viscore rugosity metrics/Emerald/ER_20250622/100cm box/", "p", i, ".csv")
data_100cm[[i]] <- read.csv(file_name)
}
# rename the columns
for (i in 1:n_files) {
colnames(data_100cm[[i]]) <- c(paste0("nail", i), "transect", "sample", "x", "y", "z")
}
# 50cm microquadrat:
for (i in 1:n_files) {
file_name <- paste0("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/2. Viscore rugosity metrics/Emerald/ER_20250622/50cm box/", "p", i, ".csv")
data_50cm[[i]] <- read.csv(file_name)
}
file_name <- paste0("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/2. Viscore rugosity metrics/Fortlauderdale/FTL_20250721/50cm box/", "p", i, ".csv")
# 50cm microquadrat:
for (i in 1:n_files) {
file_name <- paste0("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/2. Viscore rugosity metrics/Fortlauderdale/FTL_20250721/50cm box/", "p", i, ".csv")
data_50cm[[i]] <- read.csv(file_name)
}
# rename the columns
for (i in 1:n_files) {
colnames(data_50cm[[i]]) <- c(paste0("nail", i), "transect", "sample", "x", "y", "z")
}
# 100cm microquadrat:
for (i in 1:n_files) {
file_name <- paste0("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/2. Viscore rugosity metrics/Fortlauderdale/FTL_20250721/100cm box/", "p", i, ".csv")
data_100cm[[i]] <- read.csv(file_name)
}
# rename the columns
for (i in 1:n_files) {
colnames(data_100cm[[i]]) <- c(paste0("nail", i), "transect", "sample", "x", "y", "z")
}
rugo25 <- list()
rugo50 <- list()
rugo100 <- list()
# a For Loop to apply rugo calculation for each nail for 25cm:
for (i in 1:length(data_25cm)) {
# Perform the calculations on each nail dataset
rugo25[[i]] <- data_25cm[[i]] %>%
filter(z != 0) %>%
group_by(transect) %>%
summarize(
standard_length = sum(sqrt(diff(x)^2 + diff(y)^2)),  # Euclidean distance in 2D space
true_length = sum(sqrt(diff(x)^2 + diff(y)^2 + diff(z)^2)),  # 3D distance
rugosity = (true_length / standard_length),
point_range = max(z) - min(z)  # Range between lowest and highest point
) %>%
ungroup() %>%
summarize(
avg_rugo25 = mean(rugosity),
rugo25_variance = var(rugosity),
avg_point_range25 = mean(point_range)
)
}
rugosity_25cm <- bind_rows(rugo25, .id = "nail")
View(rugosity_25cm)
# a For Loop to apply rugo calculation for each nail:
for (i in 1:length(data_50cm)) {
# Perform the calculations on each nail dataset
rugo50[[i]] <- data_50cm[[i]] %>%
filter(z != 0) %>%
group_by(transect) %>%
summarize(
standard_length = sum(sqrt(diff(x)^2 + diff(y)^2)),  # Euclidean distance in 2D space
true_length = sum(sqrt(diff(x)^2 + diff(y)^2 + diff(z)^2)),  # 3D distance
rugosity = (true_length / standard_length),
point_range = max(z) - min(z)  # Range between lowest and highest point
) %>%
ungroup() %>%
summarize(
avg_rugo50 = mean(rugosity),
rugo50_variance = var(rugosity),
avg_point_range50 = mean(point_range)
)
}
rugosity_50cm <- bind_rows(rugo50, .id = "nail")
# a For Loop to apply rugo calculation for each nail:
for (i in 1:length(data_100cm)) {
# Perform the calculations on each nail dataset
rugo100[[i]] <- data_100cm[[i]] %>%
filter(z != 0) %>%
group_by(transect) %>%
summarize(
standard_length = sum(sqrt(diff(x)^2 + diff(y)^2)),  # Euclidean distance in 2D space
true_length = sum(sqrt(diff(x)^2 + diff(y)^2 + diff(z)^2)),  # 3D distance
rugosity = (true_length / standard_length),
point_range = max(z) - min(z)  # Range between lowest and highest point
) %>%
ungroup() %>%
summarize(
avg_rugo100 = mean(rugosity),
rugo100_variance = var(rugosity),
avg_point_range100 = mean(point_range)
)
}
rugosity_100cm <- bind_rows(rugo100, .id = "nail")
# Initialize an empty list to store the results
Alain_rugo25 <- list()
Alain_rugo50 <- list()
library(tidyverse)
library(ggplot2)
library(readxl)
library(dplyr)
library(patchwork)
library(ggpubr)
library(grid)
# bring in slope data from GIS:
slope25 <- read.csv("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/3. GIS rugosity metrics/Fortlauderdale/FTL_20250721/slope_25cm.csv")
slope25 <- slope25 %>%
rename(
nail = OBJECTID_1,
slope = MEAN) %>%
select(-OBJECTID, -COUNT, -AREA)
# bring in slope data from GIS:
slope25 <- read.csv("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/3. GIS rugosity metrics/Fortlauderdale/FTL_20250721/slope_25cm.csv")
slope25 <- slope25 %>%
rename(
nail = OBJECTID_1,
slope = MEAN) %>%
select(-OBJECTID, -COUNT, -AREA)
slope50 <- read.csv("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/3. GIS rugosity metrics/Fortlauderdale/FTL_20250721/slope_50cm.csv")
slope50 <- slope50 %>%
rename(
nail = OBJECTID_1,
slope = MEAN) %>%
select(-OBJECTID, -COUNT, -AREA)
slope100 <- read.csv("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/3. GIS rugosity metrics/Fortlauderdale/FTL_20250721/slope_100cm.csv")
slope100 <- slope100 %>%
rename(
nail = OBJECTID_1,
slope = MEAN) %>%
select(-OBJECTID, -COUNT, -AREA)
# and make sure the column type is the same before joining:
LSAT_bio$nail <- as.character(LSAT_bio$nail)
rugosity_25cm$nail <- as.character(FINAL_25_rugo$nail)
# bring in biotic data:
LSAT_bio <- read_xlsx("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/4. Biological metrics/Fortlauderdale/FTL_20250721/FTL_20250721_lsat.xlsx") %>%
rename(nail = Plot)
# bring in biotic data:
LSAT_bio <- read_xlsx("C:/Users/hanna/Florida International University/Coral Reef Fisheries - 2. Hannah-Marie Lamle/data/raw/LSAT/4. Biological metrics/Fortlauderdale/FTL_20250721/FTL_20250721_lsat.xlsx") %>%
rename(nail = Plot)
# and make sure the column type is the same before joining:
LSAT_bio$nail <- as.character(LSAT_bio$nail)
rugosity_25cm$nail <- as.character(rugosity_25cm$nail)
#FINAL_Alain25$nail <- as.character(FINAL_Alain25$nail)
slope25$nail <- as.character(slope25$nail)
rawdata25 <- list(LSAT_bio, rugosity_25cm, slope25) %>%
reduce(full_join, by='nail', copy = TRUE)
write.csv(rawdata25, file = "25cm Box data.csv")
# and make sure the column type is the same before joining:
rugosity_50cm$nail <- as.character(FINAL_50_rugo$nail)
# FINAL_Alain50$nail <- as.character(FINAL_Alain50$nail)
slope50$nail <- as.character(slope50$nail)
rawdata50 <- list(LSAT_bio, rugosity_50cm, slope50) %>%
reduce(full_join, by='nail', copy = TRUE)
# and make sure the column type is the same before joining:
rugosity_100cm$nail <- as.character(FINAL_100_rugo$nail)
# FINAL_Alain100$nail <- as.character(FINAL_Alain100$nail)
slope100$nail <- as.character(slope100$nail)
rawdata100 <- list(LSAT_bio, rugosity_100cm, slope100) %>%
reduce(full_join, by='nail', copy = TRUE)
# regular rugosity vs turf length
rugo25_turf <- ggplot(rawdata25, aes(x = avg_rugo25, y = `turf_ length_mm`))+   # Modelling turf length (y) as function of rugosity (x)
geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Rugosity")+
ggtitle("25cm Box")
model <- lm(`turf_ length_mm` ~ avg_rugo25, data = rawdata25)
summary(model)
rugo25_turf
# regular rugosity vs sediment depth
rugo25_sediment <- ggplot(rawdata25, aes(x = avg_rugo25,  y = sed_depth_mm))+     # modelling sediment depth (y) as function
geom_point()+                                                                 # of rugosity (x)
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Rugosity")
model <- lm(sed_depth_mm ~ avg_rugo25, data = rawdata25)
summary(model)
rugo25_sediment
View(rawdata25)
# slope vs turf length
slope25_turf <- ggplot(rawdata25, aes(slope, y = `turf_ length_mm`))+           # modelling turf length (y) as function
geom_point()+                                                                 # of slope
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Average Slope (degrees)")+
ggtitle("25cm Box")
model <- lm(`turf_ length_mm` ~ MEAN, data = rawdata25)
summary(model)
slope25_turf
# slope vs sediment depth
slope25_sediment <- ggplot(rawdata25, aes(slope, y = sed_depth_mm))+        # modelling sediment depth (y) as function
geom_point()+                                                                 # of slope (x)
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Average Slope (degrees)")
model <- lm(sed_depth_mm ~ MEAN, data = rawdata25)
summary(model)
slope25_sediment
# regular rugosity vs turf length
rugo50_turf <- ggplot(rawdata50, aes(x = avg_rugo50, y = `turf_ length_mm`))+   # Modelling turf length (y) as function of rugosity (x)
geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Rugosity")+
ggtitle("50cm Box")
model <- lm(`turf_ length_mm` ~ avg_rugo50, data = rawdata50)
summary(model)
# regular rugosity vs sediment depth
rugo50_sediment <- ggplot(rawdata50, aes(x = avg_rugo50,  y = sed_depth_mm))+     # modelling sediment depth (y) as function
geom_point()+                                                                 # of rugosity (x)
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Rugosity")
model <- lm(sed_depth_mm ~ avg_rugo50, data = rawdata50)
summary(model)
# slope vs turf length
slope50_turf <- ggplot(rawdata50, aes(slope, y = `turf_ length_mm`))+           # modelling turf length (y) as function
geom_point()+                                                                 # of slope
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Average Slope (degrees)")+
ggtitle("50cm Box")
model <- lm(`turf_ length_mm` ~ MEAN, data = rawdata50)
summary(model)
# slope vs sediment depth
slope50_sediment <- ggplot(rawdata50, aes(slope, y = sed_depth_mm))+        # modelling sediment depth (y) as function
geom_point()+                                                                 # of slope (x)
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Average Slope (degrees)")
model <- lm(sed_depth_mm ~ MEAN, data = rawdata50)
summary(model)
# regular rugosity vs turf length
rugo100_turf <- ggplot(rawdata100, aes(x = avg_rugo100, y = `turf_ length_mm`))+   # Modelling turf length (y) as function of rugosity (x)
geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Rugosity")+
ggtitle("100cm Box")
model <- lm(`turf_ length_mm` ~ avg_rugo100, data = rawdata100)
summary(model)
# regular rugosity vs sediment depth
rugo100_sediment <- ggplot(rawdata100, aes(x = avg_rugo100,  y = sed_depth_mm))+     # modelling sediment depth (y) as function
geom_point()+                                                                 # of rugosity (x)
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Rugosity")
model <- lm(sed_depth_mm ~ avg_rugo100, data = rawdata100)
summary(model)
# slope vs turf length
slope100_turf <- ggplot(rawdata100, aes(slope, y = `turf_ length_mm`))+           # modelling turf length (y) as function
geom_point()+                                                                 # of slope
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Average Slope (degrees)")+
ggtitle("100cm Box")
model <- lm(`turf_ length_mm` ~ MEAN, data = rawdata100)
summary(model)
# slope vs sediment depth
slope100_sediment <- ggplot(rawdata100, aes(slope, y = sed_depth_mm))+        # modelling sediment depth (y) as function
geom_point()+                                                                 # of slope (x)
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Average Slope (degrees)")
model <- lm(sed_depth_mm ~ MEAN, data = rawdata100)
summary(model)
p1 <- ggplot(rawdata25, aes(x = avg_rugo25, y = `Turf length (mm)`))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Rugosity")+
ggtitle("25cm microquadrat")+
theme_classic() <- ggplot(rawdata25, aes(x = avg_rugo25, y = `Turf length (mm)`))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Rugosity")+
ggtitle("25cm microquadrat")+
theme_classic()
(rugo25_turf | rugo25_sediment) / (rugo50_turf | rugo50_sediment) / (rugo100_turf | rugo100_sediment) +
plot_annotation(
title = "Rugosity Results",
)
p1 <- ggplot(rawdata25, aes(MEAN, y = `Turf length (mm)`))+
geom_point()+
geom_smooth(method = "lm", formula = y ~ x)+
xlab("Average Slope (degrees)")+
ggtitle("25cm microquadrat")+
theme_classic()
(slope25_turf | slope25_sediment) / (slope50_turf | slope50_sediment) / (slope100_turf | slope100_sediment) +
plot_annotation(
title = "Slope Results",
)
